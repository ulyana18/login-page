{"version":3,"sources":["services/apiService.js","components/loginPage/loginPage.js","components/signupPage/signupPage.js","components/routing/routing.js","App.js","serviceWorker.js","index.js"],"names":["callApi","route","email","password","a","name","isLogin","fetch","method","headers","body","JSON","stringify","user","response","json","resultObj","status","window","localStorage","clear","setItem","token","refreshToken","alert","callApiCheckToken","accessToken","getItem","console","log","LogInPage","props","passwordCheck","event","passwordInput","target","value","isEmpty","test","setState","isPasswordEmpty","this","checkSubmitDisable","emailCheck","emailInput","isEmailEmpty","isCorrect","state","isDisabled","isLoggedIn","isSpinning","logIn","bind","isSuccessful","setTimeout","className","noValidate","autoComplete","Snackbar","open","autoHideDuration","onClose","anchorOrigin","vertical","horizontal","Alert","variant","severity","TextField","required","id","label","type","onChange","Box","m","Button","disabled","onClick","CircularProgress","size","Component","SignUpPage","nameValidate","nameInput","isNotCorrectName","emailValidate","isNotCorrectEmail","passwordValidate","isNotCorrectPassword","checkConfirmPassword","isNotCorrectConfirmPassword","isSignedUp","signUp","error","helperText","App","checkToken","newValue","TabContext","style","AppBar","position","TabList","handleChange","aria-label","Tab","TabPanel","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.8b5dacdd.chunk.js","sourcesContent":["export async function callApi (route, email, password, name = '') {\n  let isLogin = (route === 'login');\n  try {\n    const response = await fetch(`/api/user/${route}`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n          user: {\n            name,\n            email,\n            password,\n          }\n      }),});\n    const resultObj = await response.json();\n    if(response.status === 401) {\n      window.localStorage.clear();\n      return false;\n    }\n    // if(resultObj.token !== undefined) {\n      window.localStorage.setItem('userName', resultObj.user);\n      window.localStorage.setItem('userEmail', resultObj.email);\n      window.localStorage.setItem('token', resultObj.token);\n      window.localStorage.setItem('refreshToken', resultObj.refreshToken);\n    // } else throw new Error('error');\n    return true;\n\n  } catch(err) {\n    isLogin ? alert('Incorrect login or password') : alert('This email is already in use!');\n  }\n}\n\nexport async function callApiCheckToken () {\n  try {\n    const response = await fetch(`/api/user/check`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        user: {\n          accessToken: window.localStorage.getItem('token'),\n          name: window.localStorage.getItem('userName'),\n          email: window.localStorage.getItem('userEmail'),\n          refreshToken: window.localStorage.getItem('refreshToken'),\n        }\n    }),});\n    const resultObj = await response.json();\n    if(response.status !== 401) {\n      window.localStorage.setItem('token', resultObj.accessToken);\n    }\n\n  } catch(err) {\n    console.log('acces token died');\n  }\n\n}\n  \n","import React, { Component } from 'react';\nimport { TextField, Snackbar } from '@material-ui/core';\nimport Button from '@material-ui/core/Button';\nimport Box from '@material-ui/core/Box';\nimport { Alert } from '@material-ui/lab';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nimport { callApi } from '../../services/apiService';\n\n\nclass LogInPage extends Component {\n    constructor(props) {\n      super(props);\n\n      this.passwordInput = '';\n      this.emailInput = '';\n      \n      this.state = {\n        isPasswordEmpty: null,\n        isEmailEmpty: null,\n        isDisabled: true,\n        isLoggedIn: null,\n        isSpinning: false,\n      }\n      this.logIn = this.logIn.bind(this);\n    }\n  \n    // async componentDidMount() {\n    //   const isSuccessful = await callApi('login', this.emailInput, this.passwordInput);\n    //   console.log(isSuccessful);\n    // }\n    async logIn() {\n      this.setState({ isSpinning: true});\n      const isSuccessful = await callApi('login', this.emailInput, this.passwordInput);\n\n      setTimeout(() => {\n        this.setState({ isLoggedIn: isSuccessful, isSpinning: false });\n      }, 500);\n    }\n\n    passwordCheck = (event) => {\n      const regexp = /^(?!\\s*$).+/;\n      this.passwordInput = event.target.value;\n      const isEmpty = !regexp.test(event.target.value);\n      this.setState({ isPasswordEmpty: isEmpty }, function() {\n        this.checkSubmitDisable();\n      })\n    }\n\n    emailCheck = (event) => {\n      const regexp = /^(?!\\s*$).+/;\n      this.emailInput = event.target.value;\n      const isEmpty = !regexp.test(event.target.value);\n      this.setState({ isEmailEmpty: isEmpty }, function() {\n        this.checkSubmitDisable();\n      })\n    }\n\n    checkSubmitDisable = () => {\n      const isCorrect = ( this.state.isPasswordEmpty === false &&\n        this.state.isEmailEmpty === false ) ? true : false;\n      this.setState({ isDisabled: !isCorrect});\n    }\n  \n    render() {\n  \n      return (\n        <form className='login-form' noValidate autoComplete='off'>\n          <Snackbar open={this.state.isLoggedIn}\n            autoHideDuration={3000}\n            onClose={() => this.setState({ isLoggedIn: null })}\n            anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\n          >\n            <Alert variant=\"outlined\" severity=\"success\">\n              You are logged in!\n            </Alert>\n          </Snackbar>\n\n          <Snackbar open={this.state.isLoggedIn === false} \n            autoHideDuration={3000}\n            onClose={() => this.setState({ isLoggedIn: null })}\n            anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\n          >\n            <Alert variant=\"outlined\" severity=\"error\">\n              Incorrect login or password!\n            </Alert>\n          </Snackbar>\n\n          <TextField required\n            id='standard-required' \n            label='Email'\n            type='email'\n            onChange={this.emailCheck}\n          />\n          <TextField required\n            id='standard-password-input'\n            label='Password'\n            type='password'\n            autoComplete='current-password'\n            onChange={this.passwordCheck}\n          />\n          <Box m={2}>\n            <Button\n              disabled={this.state.isDisabled}\n              onClick={this.logIn}\n              className='logInBtn' \n              variant='contained'\n            >\n              { this.state.isSpinning && <CircularProgress size={20} /> }\n              { !this.state.isSpinning && <span>Log In</span> }\n            </Button>\n          </Box>\n        </form>\n      );\n    }\n}\n  \nexport default LogInPage;\n","import React, { Component } from 'react';\nimport { TextField, Snackbar } from '@material-ui/core';\nimport Button from '@material-ui/core/Button';\nimport Box from '@material-ui/core/Box';\nimport { Alert } from '@material-ui/lab';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nimport { callApi } from '../../services/apiService';\n\n\nclass SignUpPage extends Component {\n    constructor(props) {\n      super(props);\n\n      this.nameInput = '';\n      this.passwordInput = '';\n      this.emailInput = '';\n\n      this.state = {\n        isNotCorrectName: null,\n        isNotCorrectEmail: null,\n        isNotCorrectPassword: null,\n        isNotCorrectConfirmPassword: null,\n        isDisabled: true,\n        isSignedUp: null,\n        isSpinning: false\n      }\n      this.signUp = this.signUp.bind(this);\n    }\n  \n    async signUp() {\n      this.setState({ isSpinning: true });\n      const isSuccessful = await callApi('signup', this.emailInput, this.passwordInput, this.nameInput);\n\n      setTimeout(() => {\n        this.setState({ isSignedUp: isSuccessful, isSpinning: false });\n      }, 500);\n    }\n\n    nameValidate = (event) => {\n      const regexp = /^[a-zA-Z]+$/;\n      const isCorrect = regexp.test(event.target.value);\n      this.nameInput = event.target.value;\n\n      this.setState({ isNotCorrectName: !isCorrect }, function() {\n        this.checkSubmitDisable();\n      });\n    }\n\n    emailValidate = (event) => {\n      const regexp = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n      const isCorrect = regexp.test(event.target.value);\n      this.emailInput = event.target.value;\n\n      this.setState({ isNotCorrectEmail: !isCorrect }, function() {\n        this.checkSubmitDisable();\n      });\n    }\n\n    passwordValidate = (event) => {\n      const regexp = /^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{8,}$/;\n      const isCorrect = regexp.test(event.target.value);\n      this.passwordInput = event.target.value;\n\n      this.setState({ isNotCorrectPassword: !isCorrect}, function() {\n        this.checkSubmitDisable();\n      });\n    }\n\n    checkConfirmPassword = (event) => {\n      const isCorrect = event.target.value === this.passwordInput;\n      this.setState({ isNotCorrectConfirmPassword: !isCorrect }, function() {\n        this.checkSubmitDisable();\n      })\n    }\n\n    checkSubmitDisable = () => {\n      const isCorrect = ( this.state.isNotCorrectName === false &&\n        this.state.isNotCorrectEmail === false &&\n        this.state.isNotCorrectPassword === false &&\n        this.state.isNotCorrectConfirmPassword === false) ? true : false;\n      this.setState({ isDisabled: !isCorrect});\n    }\n    \n    render() {\n  \n      return (\n        <form className='signup-form' noValidate autoComplete='off'>\n          <Snackbar open={this.state.isSignedUp}\n            autoHideDuration={3000}\n            onClose={() => this.setState({ isSignedUp: null })}\n            anchorOrigin={{ vertical: 'top', horizontal: 'center' }}>\n            <Alert variant=\"outlined\" severity=\"success\">\n              You are signed up!\n            </Alert>\n          </Snackbar>\n\n          <Snackbar open={this.state.isSignedUp === false}\n            autoHideDuration={3000}\n            onClose={() => this.setState({ isSignedUp: null })}\n            anchorOrigin={{ vertical: 'top', horizontal: 'center' }}>\n            <Alert variant=\"outlined\" severity=\"error\">\n              This email is already in use!\n            </Alert>\n          </Snackbar>\n          <TextField required\n            error={this.state.isNotCorrectName}\n            id='standard-required' \n            label='Name'\n            onChange={this.nameValidate}\n            helperText={ this.state.isNotCorrectName ? 'Use only alphabet characters' : false }\n          />\n          <TextField required\n            error={this.state.isNotCorrectEmail}\n            id='standard-required' \n            label='Email'\n            type='email'\n            onChange={this.emailValidate}\n            helperText={ this.state.isNotCorrectEmail ? 'Incorrect email' : false }\n          />\n          <TextField required\n            error={this.state.isNotCorrectPassword}\n            id='standard-password-input'\n            label='Password'\n            type='password'\n            autoComplete='current-password'\n            onChange={this.passwordValidate}\n            helperText={ this.state.isNotCorrectPassword ? 'Password must contain minimum eight characters, at least one letter and one number' : false }\n          />\n          <TextField required\n            error={this.state.isNotCorrectConfirmPassword}\n            id='standard-password-input'\n            label='Confirm password'\n            type='password'\n            autoComplete='current-password'\n            onChange={this.checkConfirmPassword}\n            helperText={ this.state.isNotCorrectConfirmPassword ? `Password and confirm password don't match!` : false }\n          />\n          <Box m={2}>\n            <Button\n              disabled={this.state.isDisabled}\n              onClick={this.signUp}\n              className='signUpBtn' \n              variant='contained'\n            >\n              { this.state.isSpinning && <CircularProgress size={20} /> }\n              { !this.state.isSpinning && <span>Sign Up</span> }\n            </Button>\n          </Box>\n        </form>\n      );\n    }\n}\n  \nexport default SignUpPage;\n","import React, { Component } from 'react';\nimport Button from '@material-ui/core/Button';\nimport Box from '@material-ui/core/Box';\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n  Link\n} from 'react-router-dom';\nimport LogInPage from '../../components/loginPage/loginPage';\nimport SignUpPage from '../../components/signupPage/signupPage';\nimport { callApiCheckToken } from '../../services/apiService';\n\n\nclass Routing extends Component {\n\n  checkToken = () => callApiCheckToken();\n\n  render() {\n\n    return (\n      <Router>\n        <Box m={3}>\n            <Link to='/signup'>\n            <Button\n                variant='contained'\n                className='methodBtn'\n            >\n                Sign Up\n            </Button>\n          </Link>\n          <Link to='/login'>\n            <Button\n                variant='contained'\n                className='methodBtn'\n            >\n                Log In\n            </Button>\n          </Link>\n\n          <Switch>\n            <Route path='/signup'>\n              <SignUpPage />\n            </Route>\n            <Route path='/login'>\n              <LogInPage />\n            </Route>\n          </Switch>\n        </Box>\n\n        <button onClick={this.checkToken}>check access token</button>\n        {/* <button onClick={this.updateToken}>update access token</button> */}\n      </Router>\n    );\n  }\n}\n\nexport default Routing;","import React, { Component } from 'react';\nimport './App.css';\nimport Routing from './components/routing/routing';\nimport { TabContext, TabList, TabPanel } from '@material-ui/lab';\nimport { Tab, AppBar, Snackbar, Button, Box } from '@material-ui/core';\n// import Button from '@material-ui/core/Button';\n// import Box from '@material-ui/core/Box';\n\n\nimport LogInPage from './components/loginPage/loginPage';\nimport SignUpPage from './components/signupPage/signupPage';\nimport { callApiCheckToken } from './services/apiService';\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: '1',\n    }\n  }\n\n  checkToken = () => callApiCheckToken();\n\n  handleChange(event, newValue) {\n    this.setState({value: newValue});\n  }\n\n  render() {\n\n    return (\n      <div className='App'>\n        <Button\n          className='checkTokenBtn' \n          variant='contained'\n          onClick={this.checkToken}\n        >\n          Refresh Access Token\n          </Button>\n        <div className='tabWrapper'>\n          <TabContext style='backgroundColor: #cbecec' value={this.state.value}>\n            <AppBar position='static'>\n              <TabList onChange={this.handleChange.bind(this)} aria-label='simple tabs example'>\n                <Tab label='Sign Up' value='1' />\n                <Tab label='Log In' value='2' />\n              </TabList>\n            </AppBar>\n            <TabPanel value='1'>\n              <SignUpPage />\n            </TabPanel>\n            <TabPanel value='2'>\n              <LogInPage />\n            </TabPanel>\n          </TabContext>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}