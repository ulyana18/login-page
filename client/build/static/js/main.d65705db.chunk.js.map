{"version":3,"sources":["services/apiService.js","components/loginPage/loginPage.js","components/signupPage/signupPage.js","components/routing/routing.js","App.js","serviceWorker.js","index.js"],"names":["route","email","password","a","name","isLogin","fetch","method","headers","body","JSON","stringify","user","response","json","resultObj","window","localStorage","setItem","token","refreshToken","alert","accessToken","getItem","ApiService","callApi","callApiCheckToken","LogInPage","props","logIn","emailRef","current","value","passwordRef","React","createRef","className","noValidate","autoComplete","TextField","required","id","label","inputRef","this","type","Box","m","Button","onClick","variant","Component","SignUpPage","signUp","nameRef","Routing","checkToken","to","path","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d65705db.chunk.js","sourcesContent":["async function callApi (route, email, password, name = '') {\n  let isLogin = (route === 'login');\n  try {\n    const response = await fetch(`/api/user/${route}`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n          user: {\n            name,\n            email,\n            password,\n          }\n      }),});\n    const resultObj = await response.json();\n    \n    window.localStorage.setItem('userName', resultObj.user);\n    window.localStorage.setItem('userEmail', resultObj.email);\n    window.localStorage.setItem('token', resultObj.token);\n    window.localStorage.setItem('refreshToken', resultObj.refreshToken);\n\n  } catch(err) {\n    isLogin ? alert('Incorrect login or password') : alert('This email is already in use!');\n  }\n}\n\nasync function callApiCheckToken () {\n  try {\n    const response = await fetch(`/api/user/check`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        user: {\n          accessToken: window.localStorage.getItem('token'),\n          name: window.localStorage.getItem('userName'),\n          email: window.localStorage.getItem('userEmail'),\n          refreshToken: window.localStorage.getItem('refreshToken'),\n        }\n    }),});\n    const resultObj = await response.json();\n    window.localStorage.setItem('token', resultObj.accessToken);\n\n  } catch(err) {\n    alert(err);\n  }\n\n}\n\nconst ApiService = {\n  callApi,\n  callApiCheckToken,\n};\n\nexport default ApiService;\n// export default {\n//   callApi,\n//   callApiCheckToken,\n// };\n// export default callApi;\n// module.exports = {\n//   callApi,\n//   callApiCheckToken,\n// };\n","import React, { Component } from 'react';\nimport { TextField } from '@material-ui/core';\nimport Button from '@material-ui/core/Button';\nimport Box from '@material-ui/core/Box';\n\nimport callApi from '../../services/apiService';\n\n\nclass LogInPage extends Component {\n    constructor(props) {\n      super(props);\n      this.emailRef = React.createRef();\n      this.passwordRef = React.createRef();\n    }\n  \n    logIn = () => callApi('login', this.emailRef.current.value, this.passwordRef.current.value); \n\n  \n    render() {\n  \n      return (\n        <div className='App'>  \n          <div className='login-container'>\n            <form className='login-form' noValidate autoComplete='off'>\n              <TextField required\n                id='standard-required' \n                label='Email'\n                inputRef={this.emailRef}\n              />\n              <TextField required\n                id='standard-password-input'\n                label='Password'\n                type='password'\n                autoComplete='current-password'\n                inputRef={this.passwordRef}\n              />\n              <Box m={2}>\n                <Button \n                  onClick={this.logIn}\n                  className='logInBtn' \n                  variant='contained'\n                >\n                  Log In\n                </Button>\n              </Box>\n            </form>\n          </div>\n        </div>\n      );\n    }\n}\n  \nexport default LogInPage;\n","import React, { Component } from 'react';\nimport { TextField } from '@material-ui/core';\nimport Button from '@material-ui/core/Button';\nimport Box from '@material-ui/core/Box';\n\nimport callApi from '../../services/apiService';\n\n\nclass SignUpPage extends Component {\n    constructor(props) {\n      super(props);\n      this.emailRef = React.createRef();\n      this.passwordRef = React.createRef();\n      this.nameRef = React.createRef();\n    }\n  \n  \n    signUp = () => callApi('signup', this.emailRef.current.value, this.passwordRef.current.value, this.nameRef.current.value);\n    \n    render() {\n  \n      return (\n        <div className='App'>\n          <div className='signup-container'>\n            <form className='signup-form' noValidate autoComplete='off'>\n              <TextField required\n                id='standard-required' \n                label='Name'\n                inputRef={this.nameRef}\n              />\n              <TextField required\n                id='standard-required' \n                label='Email'\n                inputRef={this.emailRef}\n              />\n              <TextField required\n                id='standard-password-input'\n                label='Password'\n                type='password'\n                autoComplete='current-password'\n                inputRef={this.passwordRef}\n              />\n              <Box m={2}>\n                <Button \n                  onClick={this.signUp}\n                  className='signUpBtn' \n                  variant='contained'\n                >\n                  Sign Up\n                </Button>\n              </Box>\n            </form>\n        </div>\n      </div>\n      );\n    }\n}\n  \nexport default SignUpPage;\n","import React, { Component } from 'react';\nimport Button from '@material-ui/core/Button';\nimport Box from '@material-ui/core/Box';\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n  Link\n} from 'react-router-dom';\nimport LogInPage from '../../components/loginPage/loginPage';\nimport SignUpPage from '../../components/signupPage/signupPage';\nimport callApiCheckToken from '../../services/apiService';\n\n\nclass Routing extends Component {\n\n  checkToken = () => callApiCheckToken();\n\n  render() {\n\n    return (\n      <Router>\n        <Box m={3}>\n            <Link to='/signup'>\n            <Button\n                variant='contained'\n                className='methodBtn'\n            >\n                Sign Up\n            </Button>\n          </Link>\n          <Link to='/login'>\n            <Button\n                variant='contained'\n                className='methodBtn'\n            >\n                Log In\n            </Button>\n          </Link>\n\n          <Switch>\n            <Route path='/signup'>\n              <SignUpPage />\n            </Route>\n            <Route path='/login'>\n              <LogInPage />\n            </Route>\n          </Switch>\n        </Box>\n\n        <button onClick={this.checkToken}>check access token</button>\n        {/* <button onClick={this.updateToken}>update access token</button> */}\n      </Router>\n    );\n  }\n}\n\nexport default Routing;","import React, { Component } from 'react';\nimport './App.css';\nimport Routing from './components/routing/routing';\n\n\nclass App extends Component {\n\n  render() {\n\n    return (\n      <div className='App'>\n        <Routing/>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}